import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useForm } from 'react-hook-form'
import { userService } from '../services/axleCrm'
import { ArrowLeft, User, Phone } from 'lucide-react'
import toast from 'react-hot-toast'
import { useTelegram } from '../hooks/useTelegram'

interface RegistrationForm {
  first_name: string
  last_name: string
  phone: string
  sex: 'male' | 'female'
  subscription_sms: boolean
}

const Registration: React.FC = () => {
  const navigate = useNavigate()
  const [loading, setLoading] = useState(false)
  const { user: tgUser, showMainButton, hideMainButton } = useTelegram()
  
  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors }
  } = useForm<RegistrationForm>({
    defaultValues: {
      sex: 'male',
      subscription_sms: true
    }
  })

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∏–∑ Telegram –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (tgUser) {
      if (tgUser.first_name) {
        setValue('first_name', tgUser.first_name)
      }
      if (tgUser.last_name) {
        setValue('last_name', tgUser.last_name)
      }
    }
  }, [tgUser, setValue])

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Telegram —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ Web App
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Telegram Web App
    if ((window as any).Telegram?.WebApp) {
      showMainButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', () => {
        // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        const form = document.querySelector('form')
        if (form) {
          form.dispatchEvent(new Event('submit', { bubbles: true }))
        }
      })

      return () => {
        hideMainButton()
      }
    }
  }, [showMainButton, hideMainButton])

  const handleRegistration = async (data: RegistrationForm) => {
    setLoading(true)
    
    try {
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', data)
      
      const userData = {
        first_name: data.first_name,
        last_name: data.last_name,
        phone: data.phone,
        sex: data.sex,
        subscription_sms: data.subscription_sms,
        comment: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
      }

      const result = await userService.register(userData)
      
                        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', result)
                  toast.success(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ID: ${result.client_id}`)

                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram
                  const message = `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!

ID: ${result.client_id}
–ò–º—è: ${result.first_name} ${result.last_name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${result.phone}
–ë–æ–Ω—É—Å—ã: ${result.bonus_balance}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ Axle CRM!`

                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram API –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                  if ((window as any).Telegram?.WebApp) {
                    try {
                      (window as any).Telegram.WebApp.showAlert(message)
                    } catch (tgError) {
                      // –ï—Å–ª–∏ Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π alert
                      alert(message)
                    }
                  } else {
                    alert(message)
                  }

                  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
                  navigate('/profile')
                    } catch (error: any) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
                  const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                  toast.error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${errorMessage}`)

                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                  const errorText = `‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:

${errorMessage}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`

                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram API —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ Web App
                  if ((window as any).Telegram?.WebApp) {
                    try {
                      (window as any).Telegram.WebApp.showAlert(errorText)
                    } catch (tgError) {
                      // –ï—Å–ª–∏ Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π alert
                      alert(errorText)
                    }
                  } else {
                    alert(errorText)
                  }
    } finally {
      setLoading(false)
    }
  }

  const handleBack = () => {
    navigate('/')
  }

  return (
    <div className="container">
      <div className="nav">
        <button className="nav-back" onClick={handleBack}>
          <ArrowLeft className="icon" />
          –ù–∞–∑–∞–¥
        </button>
        <h1 className="nav-title">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>
        <div></div>
      </div>

      <div className="card">
        <h2 className="section-title">
          <User className="icon" style={{ marginRight: '8px' }} />
          –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Axle CRM
        </h2>
        
                            <div className="notification info">
                      <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong>
                      <br />
                      ‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏–∑ Telegram –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                      <br />
                      ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –ò–º—è, –§–∞–º–∏–ª–∏—è, –¢–µ–ª–µ—Ñ–æ–Ω, –ü–æ–ª
                      <br />
                      ‚Ä¢ –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—è–≤–∏—Ç—Å—è –≤ Axle CRM
                      <br />
                      ‚Ä¢ –ù–∞—á–∏—Å–ª—è—Ç—Å—è –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (500)
                      <br />
                      ‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤ Telegram Web App, —Ç–∞–∫ –∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                    </div>

        <form onSubmit={handleSubmit(handleRegistration)}>
          <div className="form-group">
            <label className="form-label">
              <User className="icon" style={{ marginRight: '4px' }} />
              –ò–º—è *
            </label>
            <input
              type="text"
              className="form-input"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
              {...register('first_name', { required: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' })}
            />
            {errors.first_name && (
              <span className="error">{errors.first_name.message}</span>
            )}
          </div>

          <div className="form-group">
            <label className="form-label">
              <User className="icon" style={{ marginRight: '4px' }} />
              –§–∞–º–∏–ª–∏—è *
            </label>
            <input
              type="text"
              className="form-input"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
              {...register('last_name', { required: '–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' })}
            />
            {errors.last_name && (
              <span className="error">{errors.last_name.message}</span>
            )}
          </div>

          <div className="form-group">
            <label className="form-label">
              <Phone className="icon" style={{ marginRight: '4px' }} />
              –¢–µ–ª–µ—Ñ–æ–Ω *
            </label>
            <input
              type="tel"
              className="form-input"
              placeholder="+7 (999) 123-45-67"
              {...register('phone', { required: '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })}
            />
            {errors.phone && (
              <span className="error">{errors.phone.message}</span>
            )}
          </div>

          <div className="form-group">
            <label className="form-label">–ü–æ–ª *</label>
            <select
              className="form-input"
              {...register('sex', { required: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª' })}
            >
              <option value="male">–ú—É–∂—Å–∫–æ–π</option>
              <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
            </select>
            {errors.sex && (
              <span className="error">{errors.sex.message}</span>
            )}
          </div>

          <div className="form-group">
            <label className="form-label">
              <input
                type="checkbox"
                {...register('subscription_sms')}
                style={{ marginRight: '8px' }}
              />
              –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ SMS
            </label>
          </div>

                                <button
                        type="submit"
                        className="btn-primary"
                        disabled={loading}
                        style={{ marginTop: '16px' }}
                      >
                        {loading ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
                      </button>
        </form>

                            <div style={{ marginTop: '20px', padding: '16px', backgroundColor: 'rgba(0,0,0,0.05)', borderRadius: '8px' }}>
                      <h4 style={{ marginBottom: '8px' }}>–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</h4>
                      <ol style={{ marginLeft: '16px', fontSize: '14px' }}>
                        <li>–î–∞–Ω–Ω—ã–µ –∏–∑ Telegram –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
                        <li>–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Axle CRM API</li>
                        <li>–°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ</li>
                        <li>–ù–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (500)</li>
                        <li>–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ</li>
                        <li>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ Axle CRM</li>
                      </ol>
                    </div>
      </div>
    </div>
  )
}

export default Registration 