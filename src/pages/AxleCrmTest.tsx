import React, { useState } from 'react'
import { useTelegram } from '../hooks/useTelegram'
import { apiService, userService } from '../services/axleCrm'
import { ArrowLeft, Database, RefreshCw, CheckCircle, XCircle, AlertCircle, Trash2, UserPlus, FileText, Wifi, WifiOff } from 'lucide-react'
import { useNavigate } from 'react-router-dom'
import toast from 'react-hot-toast'

const AxleCrmTest: React.FC = () => {
  const { user: tgUser } = useTelegram()
  const navigate = useNavigate()
  const [isLoading, setIsLoading] = useState(false)
  const [testResults, setTestResults] = useState<any>(null)
  const [logs, setLogs] = useState<string[]>([])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString()
    const logEntry = `[${timestamp}] ${message}`
    setLogs(prev => [...prev, logEntry])
    console.log(message) // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
  }

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ localStorage
  const clearLocalStorage = () => {
    try {
      addLog('üóëÔ∏è –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ localStorage...')
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
      localStorage.removeItem('mock_users')
      localStorage.removeItem('mock_admins')
      localStorage.removeItem('mock_hookah_purchases')
      localStorage.removeItem('user')
      localStorage.removeItem('auth_token')
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å mock_
      const keysToRemove = []
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i)
        if (key && key.startsWith('mock_')) {
          keysToRemove.push(key)
        }
      }
      keysToRemove.forEach(key => localStorage.removeItem(key))
      
      addLog('‚úÖ localStorage —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω')
      toast.success('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!')
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage: ${error}`)
      toast.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Axle CRM
  const testAxleCrmConnection = async () => {
    setIsLoading(true)
    setLogs([])
    addLog('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Axle CRM...')
    
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º axios –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const axios = (await import('axios')).default
      
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ axios
      addLog('üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ axios...')
      try {
        const response = await axios.get('https://api.axle-crm.com/v1/client/add', {
          headers: {
            'Content-Type': 'application/json',
            'Api-Key': '226d5d8237fe912af0be9a0ffef377ee'
          }
        })
        addLog(`üì° GET —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`)
        addLog(`üì° GET –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(response.data)}`)
      } catch (error: any) {
        addLog(`üì° GET —Å—Ç–∞—Ç—É—Å: ${error.response?.status} ${error.response?.statusText}`)
        addLog(`üì° GET –æ—à–∏–±–∫–∞: ${error.message}`)
        
        if (error.response?.status === 405) {
          addLog('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (Method Not Allowed - –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è GET)')
        } else if (error.response?.status === 401) {
          addLog('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (Unauthorized - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)')
        } else if (error.response?.status === 404) {
          addLog('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (Not Found - —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)')
        } else if (error.response?.status) {
          addLog(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${error.response.status}`)
        } else {
          addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`)
        }
      }

      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ axios
      addLog('üîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ axios...')
      try {
        const testData = {
          first_name: '–¢–µ—Å—Ç',
          last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          phone: '+7 (999) 000-00-00',
          email: 'test@example.com',
          sex: 'male',
          subscription_sms: true,
          telegram_id: 123456789,
          comment: '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
          source: 'telegram_webapp'
        }
        
        const response = await axios.post('https://api.axle-crm.com/v1/client/add', testData, {
          headers: {
            'Content-Type': 'application/json',
            'Api-Key': '226d5d8237fe912af0be9a0ffef377ee'
          }
        })
        
        addLog(`üì° POST —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`)
        addLog(`‚úÖ POST —É—Å–ø–µ—à–µ–Ω: ${JSON.stringify(response.data)}`)
      } catch (error: any) {
        addLog(`üì° POST —Å—Ç–∞—Ç—É—Å: ${error.response?.status} ${error.response?.statusText}`)
        addLog(`üì° POST –æ—à–∏–±–∫–∞: ${error.response?.data || error.message}`)
      }

      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–∞—à apiService
      addLog('üîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–∞—à apiService...')
      try {
        const healthResult = await apiService.healthCheck()
        addLog(`‚úÖ apiService health check: ${healthResult}`)
      } catch (error: any) {
        addLog(`‚ùå apiService health check –æ—à–∏–±–∫–∞: ${error.message}`)
      }

    } catch (error: any) {
      addLog(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`)
    } finally {
      setIsLoading(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram ID
  const testRealRegistration = async () => {
    if (!tgUser?.id) {
      addLog('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      toast.error('Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    setIsLoading(true)
    setLogs([]) // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
    addLog('üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram ID')
    
    try {
      addLog(`üì± Telegram ID: ${tgUser.id}`)
      addLog(`üë§ –ò–º—è: ${tgUser.first_name || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}`)
      
      const testUserData = {
        telegram_id: tgUser.id,
        first_name: tgUser.first_name || '–¢–µ—Å—Ç–æ–≤—ã–π',
        last_name: tgUser.last_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        phone: '+7 (999) 888-77-66',
        email: 'test@example.com',
        sex: 'male' as const,
        subscription_sms: true,
        comment: `–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑ Telegram Web App (ID: ${tgUser.id})`
      }
      
      addLog('üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...')
      addLog(`   - –ò–º—è: ${testUserData.first_name}`)
      addLog(`   - –§–∞–º–∏–ª–∏—è: ${testUserData.last_name}`)
      addLog(`   - –¢–µ–ª–µ—Ñ–æ–Ω: ${testUserData.phone}`)
      addLog(`   - Email: ${testUserData.email}`)
      
      addLog('üîÑ –í—ã–∑–æ–≤ userService.register...')
      const registeredUser = await userService.register(testUserData)
      
      addLog(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! ID: ${registeredUser.id}`)
      addLog(`   - Client ID: ${registeredUser.client_id}`)
      addLog(`   - Created: ${registeredUser.created_at}`)
      
      toast.success(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! ID: ${registeredUser.id}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
      addLog('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      setTimeout(async () => {
        try {
          const foundUser = await userService.getByTelegramId(tgUser.id)
          if (foundUser) {
            addLog('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
            addLog(`   - ID: ${foundUser.id}`)
            addLog(`   - –ò–º—è: ${foundUser.first_name} ${foundUser.last_name}`)
            toast.success('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!')
          } else {
            addLog('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
            toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
          }
        } catch (error) {
          addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error}`)
          toast.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        }
      }, 2000)
      
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error}`)
      toast.error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error}`)
    } finally {
      setIsLoading(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Axle CRM
  const forceSyncWithAxleCrm = async () => {
    if (!tgUser?.id) {
      addLog('‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      toast.error('Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    setIsLoading(true)
    setLogs([]) // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
    addLog('üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Axle CRM')
    
    try {
      addLog(`üì± Telegram ID: ${tgUser.id}`)
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π fetch –∑–∞–ø—Ä–æ—Å
      addLog('üîç –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π fetch –∑–∞–ø—Ä–æ—Å...')
      try {
        const response = await fetch('https://api.axle-crm.com/v1/client/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Api-Key': '226d5d8237fe912af0be9a0ffef377ee'
          },
          body: JSON.stringify({
            first_name: '–¢–µ—Å—Ç',
            last_name: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
            phone: '+7 (999) 000-00-00',
            email: 'test@example.com',
            sex: 'male',
            subscription_sms: true,
            telegram_id: tgUser.id,
            comment: '–¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
            source: 'telegram_webapp'
          })
        })
        
        addLog(`üì° Fetch —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`)
        
        if (response.ok) {
          const data = await response.json()
          addLog(`‚úÖ Fetch —É—Å–ø–µ—à–µ–Ω: ${JSON.stringify(data)}`)
          toast.success('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ fetch —É—Å–ø–µ—à–Ω–∞!')
          return
        } else {
          const errorText = await response.text()
          addLog(`‚ùå Fetch –æ—à–∏–±–∫–∞: ${errorText}`)
        }
      } catch (fetchError: any) {
        addLog(`‚ùå Fetch –æ—à–∏–±–∫–∞: ${fetchError.message}`)
      }
      
      // –ï—Å–ª–∏ fetch –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ userService
      addLog('üîÑ –¢–µ—Å—Ç 2: –ß–µ—Ä–µ–∑ userService.forceSyncWithAxleCrm...')
      const result = await userService.forceSyncWithAxleCrm(tgUser.id)
      
      if (result.success) {
        addLog(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!`)
        addLog(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`)
        if (result.data) {
          addLog(`   - –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(result.data)}`)
        }
        toast.success('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
      } else {
        addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${result.message}`)
        toast.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${result.message}`)
      }
      
    } catch (error: any) {
      addLog(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`)
      toast.error(`–û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}`)
    } finally {
      setIsLoading(false)
    }
  }

  const runTests = async () => {
    setIsLoading(true)
    setTestResults(null)
    setLogs([]) // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
    
    addLog('üß™ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤...')
    
    const results = {
      apiHealth: false,
      apiHealthDetails: '',
      registration: false,
      registrationDetails: '',
      userSearch: false,
      userSearchDetails: ''
    }

    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
      addLog('üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...')
      try {
        const healthResult = await apiService.healthCheck()
        results.apiHealth = healthResult
        results.apiHealthDetails = healthResult ? 'API –¥–æ—Å—Ç—É–ø–µ–Ω' : 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        addLog(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: ${healthResult}`)
      } catch (error) {
        results.apiHealthDetails = `–û—à–∏–±–∫–∞: ${error}`
        addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: ${error}`)
      }

      // –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      addLog('üß™ –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      try {
        const testUserData = {
          telegram_id: 999999999,
          first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
          last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          phone: '+7 (999) 999-99-99',
          email: 'test@example.com',
          sex: 'male' as const,
          subscription_sms: true
        }
        
        addLog('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: 999999999')
        const registeredUser = await userService.register(testUserData)
        results.registration = true
        results.registrationDetails = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å ID: ${registeredUser.id}`
        addLog(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ID ${registeredUser.id}`)
      } catch (error) {
        results.registrationDetails = `–û—à–∏–±–∫–∞: ${error}`
        addLog(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error}`)
      }

      // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      addLog('üß™ –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      try {
        const foundUser = await userService.getByTelegramId(999999999)
        results.userSearch = foundUser !== null
        results.userSearchDetails = foundUser ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${foundUser.first_name} ${foundUser.last_name}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        addLog(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: ${foundUser ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`)
      } catch (error) {
        results.userSearchDetails = `–û—à–∏–±–∫–∞: ${error}`
        addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error}`)
      }

    } catch (error) {
      addLog(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error}`)
    } finally {
      setIsLoading(false)
      setTestResults(results)
      addLog('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    }
  }

  const getStatusIcon = (status: boolean) => {
    return status ? <CheckCircle className="w-5 h-5 text-green-500" /> : <XCircle className="w-5 h-5 text-red-500" />
  }

  const clearLogs = () => {
    setLogs([])
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-md mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center gap-3 mb-6">
          <button
            onClick={() => navigate('/')}
            className="p-2 rounded-full bg-white shadow-sm hover:bg-gray-50"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
          <div>
            <h1 className="text-xl font-bold text-gray-900">–¢–µ—Å—Ç Axle CRM</h1>
            <p className="text-sm text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API</p>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
        <div className="bg-white rounded-lg p-4 mb-4 shadow-sm">
          <h2 className="font-semibold text-gray-900 mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h2>
          <div className="text-sm text-gray-600">
            <p>Telegram ID: {tgUser?.id || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
            <p>–ò–º—è: {tgUser?.first_name || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}</p>
            <p>Username: {tgUser?.username || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="bg-white rounded-lg p-4 mb-4 shadow-sm space-y-3">
          <button
            onClick={testAxleCrmConnection}
            disabled={isLoading}
            className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            <Wifi className="w-5 h-5" />
            –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Axle CRM
          </button>

          <button
            onClick={runTests}
            disabled={isLoading}
            className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            {isLoading ? (
              <>
                <RefreshCw className="w-5 h-5 animate-spin" />
                –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...
              </>
            ) : (
              <>
                <Database className="w-5 h-5" />
                –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
              </>
            )}
          </button>

          <button
            onClick={testRealRegistration}
            disabled={isLoading || !tgUser?.id}
            className="w-full bg-green-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            <UserPlus className="w-5 h-5" />
            –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –º–æ–∏–º ID
          </button>

          <button
            onClick={forceSyncWithAxleCrm}
            disabled={isLoading || !tgUser?.id}
            className="w-full bg-orange-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-orange-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            <RefreshCw className="w-5 h-5" />
            –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
          </button>

          <button
            onClick={clearLocalStorage}
            className="w-full bg-red-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-red-700 flex items-center justify-center gap-2"
          >
            <Trash2 className="w-5 h-5" />
            –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          </button>
        </div>

        {/* –õ–æ–≥–∏ */}
        {logs.length > 0 && (
          <div className="bg-white rounded-lg p-4 shadow-sm mb-4">
            <div className="flex items-center justify-between mb-3">
              <h2 className="font-semibold text-gray-900 flex items-center gap-2">
                <FileText className="w-5 h-5" />
                –õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
              </h2>
              <button
                onClick={clearLogs}
                className="text-sm text-gray-500 hover:text-gray-700"
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </button>
            </div>
            <div className="bg-gray-100 rounded p-3 max-h-60 overflow-y-auto">
              {logs.map((log, index) => (
                <div key={index} className="text-xs font-mono text-gray-800 mb-1">
                  {log}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
        {testResults && (
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <h2 className="font-semibold text-gray-900 mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h2>
            
            <div className="space-y-4">
              {/* –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API */}
              <div className="flex items-start gap-3">
                {getStatusIcon(testResults.apiHealth)}
                <div className="flex-1">
                  <h3 className="font-medium text-gray-900">–ó–¥–æ—Ä–æ–≤—å–µ API</h3>
                  <p className="text-sm text-gray-600">{testResults.apiHealthDetails}</p>
                </div>
              </div>

              {/* –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
              <div className="flex items-start gap-3">
                {getStatusIcon(testResults.registration)}
                <div className="flex-1">
                  <h3 className="font-medium text-gray-900">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
                  <p className="text-sm text-gray-600">{testResults.registrationDetails}</p>
                </div>
              </div>

              {/* –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ */}
              <div className="flex items-start gap-3">
                {getStatusIcon(testResults.userSearch)}
                <div className="flex-1">
                  <h3 className="font-medium text-gray-900">–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
                  <p className="text-sm text-gray-600">{testResults.userSearchDetails}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <div className="bg-blue-50 rounded-lg p-4 mt-4">
          <h3 className="font-medium text-blue-900 mb-2">–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ <strong>–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</strong> –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ Axle CRM</li>
            <li>‚Ä¢ <strong>–ó–¥–æ—Ä–æ–≤—å–µ API:</strong> –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞</li>
            <li>‚Ä¢ <strong>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</strong> –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>
            <li>‚Ä¢ <strong>–ü–æ–∏—Å–∫:</strong> –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID</li>
            <li>‚Ä¢ <strong>–¢–µ—Å—Ç —Å –º–æ–∏–º ID:</strong> –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞—Å —Å –≤–∞—à–∏–º —Ä–µ–∞–ª—å–Ω—ã–º Telegram ID</li>
          </ul>
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ */}
        <div className="bg-yellow-50 rounded-lg p-4 mt-4">
          <h3 className="font-medium text-yellow-900 mb-2">–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</h3>
          <p className="text-sm text-yellow-800">
            –ù–∞–∂–º–∏—Ç–µ "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. 
            –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ Axle CRM.
          </p>
        </div>
      </div>
    </div>
  )
}

export default AxleCrmTest 