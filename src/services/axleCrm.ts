import axios from 'axios'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE_URL = '/api/axle-crm' // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è Vercel
const API_KEY = '16cda9d095f968b402ff6830a43052e8'

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
    'Api-Key': API_KEY
  },
  timeout: 10000
})

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export interface User {
  id?: number
  client_id?: number
  telegram_id?: number
  first_name?: string
  last_name?: string
  phone?: string
  sex?: 'male' | 'female'
  subscription_sms?: boolean
  bonus_balance?: number
  created_at?: string
  updated_at?: string
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export const userService = {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async register(userData: {
    first_name: string
    last_name: string
    phone: string
    sex: 'male' | 'female'
    subscription_sms: boolean
    comment?: string
  }): Promise<User> {
    try {
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', userData)
      
      const response = await api.post('/client/add', userData)
      
      console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç API:', response.data)
      return response.data
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
      
      if (error.response) {
        console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response.data)
        throw new Error(error.response.data.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
      } else if (error.request) {
        throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
      } else {
        throw new Error(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      }
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
  async getByTelegramId(telegramId: number): Promise<User | null> {
    try {
      const response = await api.get(`/client/telegram/${telegramId}`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      return null
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async exists(telegramId: number): Promise<boolean> {
    try {
      const response = await api.get(`/client/exists/${telegramId}`)
      return response.data.exists
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      return false
    }
  }
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API
export const healthService = {
  async healthCheck(): Promise<boolean> {
    try {
      const response = await api.get('/health')
      return response.status === 200
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API:', error)
      return false
    }
  }
} 