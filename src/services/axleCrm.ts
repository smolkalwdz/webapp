import axios from 'axios'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE_URL = '/api/axle-crm' // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è Vercel
const API_KEY = '16cda9d095f968b402ff6830a43052e8'

// –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
const USE_MOCK = false // –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Axle CRM

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
    'Api-Key': API_KEY
  },
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É CORS
  withCredentials: false,
  timeout: 10000
})

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const getMockData = (key: string, defaultValue: any) => {
  try {
    const stored = localStorage.getItem(`mock_${key}`)
    return stored ? JSON.parse(stored) : defaultValue
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö ${key}:`, error)
    return defaultValue
  }
}

const setMockData = (key: string, data: any) => {
  try {
    localStorage.setItem(`mock_${key}`, JSON.stringify(data))
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö ${key}:`, error)
  }
}

// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ localStorage
const defaultUsers: User[] = [
  // –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  {
    id: 1,
    client_id: 1,
    telegram_id: 123456789, // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
    first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    email: 'test@example.com',
    phone: '+7 (999) 123-45-67',
    sex: 'male',
    subscription_sms: true,
    bonus_balance: 1000,
    created_at: '2025-01-01T10:00:00Z',
    updated_at: '2025-01-01T10:00:00Z'
  }
]

let mockUsers: User[] = getMockData('users', defaultUsers)
const mockEvents: Event[] = [
  {
    id: 1,
    title: '–¢—É—Ä–Ω–∏—Ä –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–º –∏–≥—Ä–∞–º',
    description: '–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä',
    date: '2025-01-15',
    time: '19:00',
    max_participants: 20,
    current_participants: 12,
    price: 500,
    status: 'active',
    created_at: '2025-01-01T10:00:00Z'
  },
  {
    id: 2,
    title: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –∫–∞–ª—å—è–Ω—É',
    description: '–ù–∞—É—á–∏—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å –∏ –ø–æ–¥–∞–≤–∞—Ç—å –∫–∞–ª—å—è–Ω',
    date: '2025-01-20',
    time: '18:00',
    max_participants: 15,
    current_participants: 8,
    price: 800,
    status: 'active',
    created_at: '2025-01-01T10:00:00Z'
  }
]

const mockPromotions: Promotion[] = [
  {
    id: 1,
    title: '–ê–∫—Ü–∏—è 5+1',
    description: '–ó–∞–∫–∞–∂–∏—Ç–µ 5 –∫–∞–ª—å—è–Ω–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç–µ 6-–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!',
    type: 'hookah_5_plus_1',
    is_active: true,
    valid_from: '2025-01-01',
    valid_to: '2025-12-31',
    created_at: '2025-01-01T10:00:00Z'
  }
]

// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const defaultAdmins: Admin[] = [
  {
    id: 1,
    telegram_id: 885843500, // –í–∞—à Telegram ID
    first_name: '–ì–ª–∞–≤–Ω—ã–π',
    last_name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    is_main_admin: true,
    created_at: '2025-01-01T10:00:00Z'
  }
]

let mockAdmins: Admin[] = getMockData('admins', defaultAdmins)

// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∫–∞–ª—å—è–Ω–æ–≤
const defaultHookahPurchases: HookahPurchase[] = [
  {
    id: 1,
    guest_id: 1,
    admin_id: 1,
    is_free: false,
    created_at: '2025-01-15T14:30:00Z',
    rating: 5,
    rating_comment: '–û—Ç–ª–∏—á–Ω—ã–π –∫–∞–ª—å—è–Ω!'
  },
  {
    id: 2,
    guest_id: 1,
    admin_id: 1,
    is_free: false,
    created_at: '2025-01-16T16:45:00Z',
    rating: 4
  },
  {
    id: 3,
    guest_id: 1,
    admin_id: 1,
    is_free: false,
    created_at: '2025-01-17T18:20:00Z'
  },
  {
    id: 4,
    guest_id: 1,
    admin_id: 1,
    is_free: false,
    created_at: '2025-01-18T20:15:00Z'
  },
  {
    id: 5,
    guest_id: 1,
    admin_id: 1,
    is_free: false,
    created_at: '2025-01-19T22:00:00Z'
  }
]

let mockHookahPurchases: HookahPurchase[] = getMockData('hookah_purchases', defaultHookahPurchases)

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
export interface User {
  id?: number
  client_id?: number
  telegram_id?: number
  first_name?: string
  last_name?: string
  middle_name?: string
  dob?: string
  sex?: 'male' | 'female'
  phone?: string
  subscription_sms?: boolean
  email?: string
  card_number?: string
  bonus_balance?: number
  comment?: string
  loyalty_id?: number
  cohort_id?: number
  created_at?: string
  updated_at?: string
}

export interface Event {
  id: number
  title: string
  description: string
  date: string
  time: string
  max_participants: number
  current_participants: number
  price?: number
  status: 'active' | 'cancelled' | 'completed'
  created_at: string
}

export interface Booking {
  id?: number
  user_id: number
  event_id: number
  status: 'pending' | 'confirmed' | 'cancelled'
  created_at?: string
  updated_at?: string
}

export interface Promotion {
  id: number
  title: string
  description: string
  type: 'hookah_5_plus_1' | 'discount' | 'free_drink'
  discount_percent?: number
  is_active: boolean
  valid_from: string
  valid_to: string
  created_at: string
}

// –ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã 5+1
export interface HookahPurchase {
  id: number
  guest_id: number
  admin_id?: number
  is_free: boolean
  created_at: string
  rating?: number
  rating_comment?: string
}

export interface HookahStats {
  purchases_count: number
  total_purchases: number
  free_hookahs_available: number
  purchases_until_free: number
  can_claim_free: boolean
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
export interface Admin {
  id: number
  telegram_id: number
  first_name: string
  last_name: string
  is_main_admin: boolean
  created_at: string
}

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export const userService = {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async register(userData: Omit<User, 'id' | 'created_at' | 'updated_at'>): Promise<User> {
    console.log('üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Axle CRM:', userData)
    console.log('üîë API Key:', API_KEY)
    console.log('üåê API URL:', API_BASE_URL)
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Axle CRM —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const axelData = {
        first_name: userData.first_name,
        last_name: userData.last_name,
        phone: userData.phone,
        sex: userData.sex,
        subscription_sms: userData.subscription_sms,
        comment: userData.comment || '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
        // –î—Ä—É–≥–∏–µ –ø–æ–ª—è (email, card_number, bonus_balance, loyalty_id, cohort_id) –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        // –û–Ω–∏ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Axle CRM:', axelData)
      console.log('üì° Headers:', api.defaults.headers)
      
      const response = await api.post('/client/add', axelData)
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Axle CRM:', response.data)
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Axle CRM
      return {
        id: response.data.id,
        client_id: response.data.id,
        ...userData,
        created_at: response.data.created_at || new Date().toISOString(),
        updated_at: response.data.updated_at || new Date().toISOString()
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Axle CRM:', error)
      console.error('üì° Response status:', axios.isAxiosError(error) ? error.response?.status : 'N/A')
      console.error('üì° Response data:', axios.isAxiosError(error) ? error.response?.data : 'N/A')
      console.error('üì° Response headers:', axios.isAxiosError(error) ? error.response?.headers : 'N/A')
      
      if (axios.isAxiosError(error) && error.response?.status === 409) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        try {
          const existingUser = await this.getUserFromAxleCrm(userData.telegram_id!)
          if (existingUser) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Axle CRM:', existingUser)
            return existingUser
          }
        } catch (getError) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', getError)
        }
      }
      
      throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${axios.isAxiosError(error) ? error.response?.data?.message || error.message : error}`)
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
  async getByTelegramId(telegramId: number): Promise<User | null> {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id:', telegramId)
    
    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ, –∏—â–µ–º –≤ localStorage
    if (USE_MOCK) {
      mockUsers = getMockData('users', defaultUsers)
      const localUser = mockUsers.find(u => u.telegram_id === telegramId)
      if (localUser) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ localStorage:', localUser)
        return localUser
      }
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage')
      return null
    }
    
    // –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –≤ Axle CRM
    try {
      console.log('üîÑ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Axle CRM...')
      const axelUser = await this.getUserFromAxleCrm(telegramId)
      if (axelUser) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ Axle CRM:', axelUser)
        return axelUser
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Axle CRM:', error)
    }
    
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return null
  },

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Axle CRM
  async getUserFromAxleCrm(telegramId: number): Promise<User | null> {
    try {
      console.log('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID –≤ Axle CRM:', telegramId)
      const response = await api.get(`/client/telegram/${telegramId}`)
      console.log('–û—Ç–≤–µ—Ç –æ—Ç Axle CRM API:', response.data)
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Axle CRM –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
      const axelUser = response.data
      return {
        id: axelUser.id,
        client_id: axelUser.id,
        telegram_id: axelUser.telegram_id,
        first_name: axelUser.first_name,
        last_name: axelUser.last_name,
        phone: axelUser.phone,
        email: axelUser.email,
        sex: axelUser.sex,
        subscription_sms: axelUser.subscription_sms,
        bonus_balance: axelUser.bonus_balance,
        comment: axelUser.comment,
        created_at: axelUser.created_at,
        updated_at: axelUser.updated_at
      }
    } catch (error) {
      console.error('–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Axle CRM:', error)
      if (axios.isAxiosError(error)) {
        console.error('–°—Ç–∞—Ç—É—Å:', error.response?.status)
        console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response?.data)
        if (error.response?.status === 404) {
          return null
        }
      }
      throw error
    }
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Axle CRM
  async forceSyncWithAxleCrm(telegramId: number): Promise<{ success: boolean; message: string; data?: any }> {
    try {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Axle CRM –¥–ª—è Telegram ID:', telegramId)
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
      const localUser = mockUsers.find(u => u.telegram_id === telegramId)
      if (!localUser) {
        return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ' }
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Axle CRM
      const axelData = {
        first_name: localUser.first_name,
        last_name: localUser.last_name,
        phone: localUser.phone,
        email: localUser.email,
        sex: localUser.sex,
        subscription_sms: localUser.subscription_sms,
        telegram_id: localUser.telegram_id,
        comment: localUser.comment || '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Telegram Web App',
        source: 'telegram_webapp'
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Axle CRM:', axelData)
      
      try {
        const response = await api.post('/client/add', axelData)
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Axle CRM:', response.data)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å ID –∏–∑ Axle CRM
        const updatedUser = { ...localUser, id: response.data.id, client_id: response.data.id }
        const userIndex = mockUsers.findIndex(u => u.telegram_id === telegramId)
        if (userIndex !== -1) {
          mockUsers[userIndex] = updatedUser
          setMockData('users', mockUsers)
        }
        
        return { 
          success: true, 
          message: '–£—Å–ø–µ—à–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Axle CRM', 
          data: response.data 
        }
      } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Axle CRM:', error)
        
        if (error.response?.status === 409) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
          try {
            const existingUser = await this.getUserFromAxleCrm(telegramId)
            if (existingUser) {
              // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              const userIndex = mockUsers.findIndex(u => u.telegram_id === telegramId)
              if (userIndex !== -1) {
                mockUsers[userIndex] = { ...localUser, ...existingUser }
                setMockData('users', mockUsers)
              }
              return { 
                success: true, 
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Axle CRM, –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 
                data: existingUser 
              }
            }
          } catch (getError) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', getError)
          }
        }
        
        return { 
          success: false, 
          message: `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.response?.data?.message || error.message}` 
        }
      }
    } catch (error: any) {
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error)
      return { 
        success: false, 
        message: `–û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}` 
      }
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  async getByTelegramIdOld(telegramId: number): Promise<User | null> {
    if (USE_MOCK) {
      console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö —Å telegram_id:', telegramId)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      mockUsers = getMockData('users', defaultUsers)
      
      console.log('üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö:', mockUsers)
      const user = mockUsers.find(u => u.telegram_id === telegramId)
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user)
      return user || null
    }

    try {
      console.log('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID –≤ Axle CRM:', telegramId)
      const response = await api.get(`/client/telegram/${telegramId}`)
      console.log('–û—Ç–≤–µ—Ç –æ—Ç Axle CRM API:', response.data)
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Axle CRM –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
      const axelUser = response.data
      return {
        id: axelUser.id,
        client_id: axelUser.id,
        telegram_id: axelUser.telegram_id,
        first_name: axelUser.first_name,
        last_name: axelUser.last_name,
        phone: axelUser.phone,
        email: axelUser.email,
        sex: axelUser.sex,
        subscription_sms: axelUser.subscription_sms,
        bonus_balance: axelUser.bonus_balance,
        comment: axelUser.comment,
        created_at: axelUser.created_at,
        updated_at: axelUser.updated_at
      }
    } catch (error) {
      console.error('–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Axle CRM:', error)
      if (axios.isAxiosError(error)) {
        console.error('–°—Ç–∞—Ç—É—Å:', error.response?.status)
        console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response?.data)
        if (error.response?.status === 404) {
          return null
        }
      }
      throw error
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async update(telegramId: number, userData: Partial<User>): Promise<User> {
    if (USE_MOCK) {
      const userIndex = mockUsers.findIndex(u => u.telegram_id === telegramId)
      if (userIndex !== -1) {
        mockUsers[userIndex] = { ...mockUsers[userIndex], ...userData, updated_at: new Date().toISOString() }
        return mockUsers[userIndex]
      }
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    try {
      const response = await api.put(`/users/telegram/${telegramId}`, userData)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async exists(telegramId: number): Promise<boolean> {
    try {
      const user = await this.getByTelegramId(telegramId)
      return user !== null
    } catch (error) {
      return false
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getAllUsers(): Promise<User[]> {
    if (USE_MOCK) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      mockUsers = getMockData('users', defaultUsers)
      return mockUsers
    }

    try {
      const response = await api.get('/users')
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
      return []
    }
  }
}

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
export const eventService = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
  async getActive(): Promise<Event[]> {
    if (USE_MOCK) {
      return mockEvents.filter(event => event.status === 'active')
    }

    try {
      const response = await api.get('/events?status=active')
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ ID
  async getById(id: number): Promise<Event> {
    if (USE_MOCK) {
      const event = mockEvents.find(e => e.id === id)
      if (!event) throw new Error('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      return event
    }

    try {
      const response = await api.get(`/events/${id}`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserEvents(telegramId: number): Promise<Event[]> {
    if (USE_MOCK) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      return mockEvents.filter(event => event.status === 'active')
    }

    try {
      const response = await api.get(`/users/telegram/${telegramId}/events`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
    }
  }
}

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
export const bookingService = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  async create(bookingData: Omit<Booking, 'id' | 'created_at' | 'updated_at'>): Promise<Booking> {
    if (USE_MOCK) {
      const newBooking: Booking = {
        ...bookingData,
        id: Math.floor(Math.random() * 1000),
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }
      return newBooking
    }

    try {
      const response = await api.post('/bookings', bookingData)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserBookings(telegramId: number): Promise<Booking[]> {
    if (USE_MOCK) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      return []
    }

    try {
      const response = await api.get(`/users/telegram/${telegramId}/bookings`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    }
  },

  // –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  async cancel(bookingId: number): Promise<Booking> {
    if (USE_MOCK) {
      return {
        id: bookingId,
        user_id: 1,
        event_id: 1,
        status: 'cancelled',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }
    }

    try {
      const response = await api.put(`/bookings/${bookingId}/cancel`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
  async checkAvailability(eventId: number): Promise<boolean> {
    try {
      const event = await eventService.getById(eventId)
      return event.current_participants < event.max_participants
    } catch (error) {
      return false
    }
  }
}

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ü–∏—è–º–∏
export const promotionService = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π
  async getActive(): Promise<Promotion[]> {
    if (USE_MOCK) {
      return mockPromotions.filter(promo => promo.is_active)
    }

    try {
      const response = await api.get('/promotions?is_active=true')
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ü–∏–π:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π')
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ü–∏–∏ 5+1
  async getHookahPromotion(): Promise<Promotion | null> {
    if (USE_MOCK) {
      return mockPromotions.find(promo => promo.type === 'hookah_5_plus_1' && promo.is_active) || null
    }

    try {
      const response = await api.get('/promotions?type=hookah_5_plus_1&is_active=true')
      const promotions = response.data
      return promotions.length > 0 ? promotions[0] : null
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ü–∏–∏ 5+1:', error)
      return null
    }
  },

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async activatePromotion(telegramId: number, promotionId: number): Promise<boolean> {
    if (USE_MOCK) {
      // –í—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      return true
    }

    try {
      const response = await api.post(`/users/telegram/${telegramId}/promotions/${promotionId}/activate`)
      return response.data.success
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫—Ü–∏–∏:', error)
      return false
    }
  }
}

// –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
export const apiService = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
  async healthCheck(): Promise<boolean> {
    if (USE_MOCK) {
      return true
    }

    try {
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Axle CRM API...')
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
      const endpoints = ['/', '/health', '/client/add', '/client/telegram/123456789']
      
      for (const endpoint of endpoints) {
        try {
          console.log(`–ü—Ä–æ–±—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç: ${endpoint}`)
          const response = await api.get(endpoint)
          console.log(`‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint} –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:`, response.status)
          return true
        } catch (error) {
          if (axios.isAxiosError(error)) {
            const status = error.response?.status
            console.log(`‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:`, status)
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º 401 (Unauthorized), —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if (status === 401) {
              console.log('‚úÖ Axle CRM API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
              return true
            }
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º 404 (Not Found), —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
            if (status === 404) {
              console.log('‚úÖ Axle CRM API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
              return true
            }
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º 405 (Method Not Allowed), —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
            if (status === 405) {
              console.log('‚úÖ Axle CRM API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
              return true
            }
          }
        }
      }
      
      console.log('‚ùå –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
      return false
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è Axle CRM API:', error)
      return false
    }
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  handleError(error: any): string {
    if (axios.isAxiosError(error)) {
      const status = error.response?.status
      if (status === 401) {
        return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.'
      }
      if (status === 404) {
        return '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.'
      }
      if (status === 422) {
        return '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.'
      }
      if (status && status >= 500) {
        return '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      }
      return error.response?.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.'
    }
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.'
  }
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª—å—è–Ω–∞–º–∏ (—Å–∏—Å—Ç–µ–º–∞ 5+1)
export const hookahService = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getStats(telegramId: number): Promise<HookahStats> {
    if (USE_MOCK) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      mockUsers = getMockData('users', defaultUsers)
      mockHookahPurchases = getMockData('hookah_purchases', defaultHookahPurchases)
      
      const user = mockUsers.find(u => u.telegram_id === telegramId)
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      const userPurchases = mockHookahPurchases.filter(p => p.guest_id === (user.id || 0))
      const purchasesCount = userPurchases.filter(p => !p.is_free).length
      const totalPurchases = userPurchases.length
      const freeHookahsAvailable = Math.floor(purchasesCount / 5)
      const purchasesUntilFree = 5 - (purchasesCount % 5)
      
      return {
        purchases_count: purchasesCount,
        total_purchases: totalPurchases,
        free_hookahs_available: freeHookahsAvailable,
        purchases_until_free: purchasesUntilFree,
        can_claim_free: freeHookahsAvailable > 0
      }
    }

    try {
      const response = await api.get(`/hookah/stats/${telegramId}`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ª—å—è–Ω–æ–≤:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
  async getPurchaseHistory(telegramId: number): Promise<HookahPurchase[]> {
    if (USE_MOCK) {
      const user = mockUsers.find(u => u.telegram_id === telegramId)
      if (!user) {
        return []
      }
      
      return mockHookahPurchases
        .filter(p => p.guest_id === (user.id || 0))
        .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
    }

    try {
      const response = await api.get(`/hookah/history/${telegramId}`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫')
    }
  },

  // –ó–∞–ø—Ä–æ—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞
  async claimFreeHookah(telegramId: number): Promise<boolean> {
    if (USE_MOCK) {
      const user = mockUsers.find(u => u.telegram_id === telegramId)
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      const stats = await this.getStats(telegramId)
      if (!stats.can_claim_free) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞')
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      const admins = mockAdmins
      for (const admin of admins) {
        console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${admin.first_name} ${admin.last_name} (${admin.telegram_id}):`)
        console.log(`   –ì–æ—Å—Ç—å ${user.first_name} ${user.last_name} (${user.phone}) —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω!`)
        console.log(`   Telegram ID: ${user.telegram_id}`)
        console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤: ${stats.free_hookahs_available}`)
      }
      
      return true
    }

    try {
      const response = await api.post(`/hookah/claim-free/${telegramId}`)
      return response.data.success
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω')
    }
  },

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  async confirmFreeHookah(adminTelegramId: number, guestTelegramId: number): Promise<boolean> {
    if (USE_MOCK) {
      const admin = mockAdmins.find(a => a.telegram_id === adminTelegramId)
      const guest = mockUsers.find(u => u.telegram_id === guestTelegramId)
      
      if (!admin) {
        throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
      }
      
      if (!guest) {
        throw new Error('–ì–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      const stats = await this.getStats(guestTelegramId)
      if (!stats.can_claim_free) {
        throw new Error('–£ –≥–æ—Å—Ç—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤')
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω
      const newPurchase: HookahPurchase = {
        id: mockHookahPurchases.length + 1,
        guest_id: guest.id || 0,
        admin_id: admin.id,
        is_free: true,
        created_at: new Date().toISOString()
      }
      
      mockHookahPurchases.push(newPurchase)
      console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${admin.first_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω –¥–ª—è ${guest.first_name} ${guest.last_name}`)
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      const otherAdmins = mockAdmins.filter(a => a.telegram_id !== adminTelegramId)
      for (const otherAdmin of otherAdmins) {
        console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${otherAdmin.first_name} ${otherAdmin.last_name}:`)
        console.log(`   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${admin.first_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω –¥–ª—è ${guest.first_name} ${guest.last_name}`)
      }
      
      return true
    }

    try {
      const response = await api.post('/admin/hookah/confirm-free', {
        admin_telegram_id: adminTelegramId,
        guest_telegram_id: guestTelegramId
      })
      return response.data.success
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–ª—å—è–Ω–∞:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–ª—å—è–Ω')
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async deleteLastPurchase(adminTelegramId: number, guestPhone: string): Promise<boolean> {
    if (USE_MOCK) {
      const admin = mockAdmins.find(a => a.telegram_id === adminTelegramId)
      const guest = mockUsers.find(u => u.phone === guestPhone)
      
      if (!admin) {
        throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
      }
      
      if (!guest) {
        throw new Error('–ì–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      const userPurchases = mockHookahPurchases.filter(p => p.guest_id === (guest.id || 0))
      if (userPurchases.length === 0) {
        throw new Error('–£ —ç—Ç–æ–≥–æ –≥–æ—Å—Ç—è –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫')
      }
      
      // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫—É–ø–∫—É
      const lastPurchase = userPurchases.sort((a, b) => 
        new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
      )[0]
      
      const purchaseIndex = mockHookahPurchases.findIndex(p => p.id === lastPurchase.id)
      if (purchaseIndex !== -1) {
        mockHookahPurchases.splice(purchaseIndex, 1)
        console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${admin.first_name} —É–¥–∞–ª–∏–ª –ø–æ–∫—É–ø–∫—É –¥–ª—è ${guest.first_name} ${guest.last_name}`)
        return true
      }
      
      return false
    }

    try {
      const response = await api.delete('/admin/hookah/purchase', {
        data: {
          admin_telegram_id: adminTelegramId,
          guest_phone: guestPhone
        }
      })
      return response.data.success
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–∫—É')
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async addPurchase(telegramId: number, guestPhone: string): Promise<HookahPurchase> {
    if (USE_MOCK) {
      const guest = mockUsers.find(u => u.phone === guestPhone)
      if (!guest) {
        throw new Error('–ì–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      const newPurchase: HookahPurchase = {
        id: mockHookahPurchases.length + 1,
        guest_id: guest.id,
        admin_id: 1, // –ú–æ–∫-–∞–¥–º–∏–Ω
        is_free: false,
        created_at: new Date().toISOString()
      }
      
      mockHookahPurchases.push(newPurchase)
      console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –¥–ª—è ${guest.first_name} ${guest.last_name}`)
      return newPurchase
    }

    try {
      const response = await api.post('/hookah/purchase', {
        guest_phone: guestPhone,
        admin_telegram_id: telegramId
      })
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É')
    }
  }
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
export const adminService = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  async isAdmin(telegramId: number): Promise<boolean> {
    if (USE_MOCK) {
      return mockAdmins.some(admin => admin.telegram_id === telegramId)
    }

    try {
      const response = await api.get(`/admin/check/${telegramId}`)
      return response.data.is_admin
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error)
      return false
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
  async getAdmin(telegramId: number): Promise<Admin | null> {
    if (USE_MOCK) {
      return mockAdmins.find(admin => admin.telegram_id === telegramId) || null
    }

    try {
      const response = await api.get(`/admin/${telegramId}`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error)
      return null
    }
  },

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 4 —Ü–∏—Ñ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  async findUserByPhoneLast4(last4: string): Promise<User[]> {
    if (USE_MOCK) {
      return mockUsers.filter(user => 
        user.phone && user.phone.replace(/\D/g, '').endsWith(last4)
      )
    }

    try {
      const response = await api.get(`/users/search?phone_last4=${last4}`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      return []
    }
  },

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)
  async addAdmin(mainAdminTelegramId: number, newAdminTelegramId: number, role: string = 'admin'): Promise<boolean> {
    if (USE_MOCK) {
      const mainAdmin = mockAdmins.find(a => a.telegram_id === mainAdminTelegramId && a.is_main_admin)
      if (!mainAdmin) {
        throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
      }
      
      const existingAdmin = mockAdmins.find(a => a.telegram_id === newAdminTelegramId)
      if (existingAdmin) {
        throw new Error('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
      }
      
      const newAdminUser = mockUsers.find(u => u.telegram_id === newAdminTelegramId)
      if (!newAdminUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      const newAdmin: Admin = {
        id: mockAdmins.length + 1,
        telegram_id: newAdminTelegramId,
        first_name: newAdminUser.first_name || '',
        last_name: newAdminUser.last_name || '',
        is_main_admin: false,
        created_at: new Date().toISOString()
      }
      
      mockAdmins.push(newAdmin)
      console.log(`–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${mainAdmin.first_name} –¥–æ–±–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${newAdminUser.first_name} ${newAdminUser.last_name}`)
      return true
    }

    try {
      const response = await api.post('/admin/add', {
        main_admin_telegram_id: mainAdminTelegramId,
        new_admin_telegram_id: newAdminTelegramId,
        role: role
      })
      return response.data.success
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    }
  },

  async removeAdmin(mainAdminTelegramId: number, adminTelegramId: number): Promise<boolean> {
    if (USE_MOCK) {
      const mainAdmin = mockAdmins.find(a => a.telegram_id === mainAdminTelegramId && a.is_main_admin)
      if (!mainAdmin) {
        throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
      }
      
      const adminToRemove = mockAdmins.find(a => a.telegram_id === adminTelegramId)
      if (!adminToRemove) {
        throw new Error('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      if (adminToRemove.is_main_admin) {
        throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
      }
      
      const adminIndex = mockAdmins.findIndex(a => a.telegram_id === adminTelegramId)
      if (adminIndex !== -1) {
        mockAdmins.splice(adminIndex, 1)
        console.log(`–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${mainAdmin.first_name} —É–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${adminToRemove.first_name} ${adminToRemove.last_name}`)
        return true
      }
      
      return false
    }

    try {
      const response = await api.delete('/admin/remove', {
        data: {
          main_admin_telegram_id: mainAdminTelegramId,
          admin_telegram_id: adminTelegramId
        }
      })
      return response.data.success
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    }
  },

  async getAllAdmins(): Promise<Admin[]> {
    if (USE_MOCK) {
      return mockAdmins
    }

    try {
      const response = await api.get('/admin/list')
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error)
      return []
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∫–∞–ª—å—è–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  async addHookahPurchase(adminTelegramId: number, guestPhone: string): Promise<HookahPurchase> {
    if (USE_MOCK) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      mockUsers = getMockData('users', defaultUsers)
      mockAdmins = getMockData('admins', defaultAdmins)
      mockHookahPurchases = getMockData('hookah_purchases', defaultHookahPurchases)
      
      const admin = mockAdmins.find(a => a.telegram_id === adminTelegramId)
      if (!admin) {
        throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
      }

      const guest = mockUsers.find(u => u.phone === guestPhone)
      if (!guest) {
        throw new Error('–ì–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const newPurchase: HookahPurchase = {
        id: mockHookahPurchases.length + 1,
        guest_id: guest.id || 0,
        admin_id: admin.id,
        is_free: false,
        created_at: new Date().toISOString()
      }

      mockHookahPurchases.push(newPurchase)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      setMockData('hookah_purchases', mockHookahPurchases)
      
      console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${admin.first_name} –¥–æ–±–∞–≤–∏–ª –ø–æ–∫—É–ø–∫—É –¥–ª—è ${guest.first_name} ${guest.last_name}`)
      return newPurchase
    }

    try {
      const response = await api.post('/admin/hookah/purchase', {
        admin_telegram_id: adminTelegramId,
        guest_phone: guestPhone
      })
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É')
    }
  }
}

export default {
  userService,
  eventService,
  bookingService,
  promotionService,
  apiService,
  hookahService,
  adminService
} 